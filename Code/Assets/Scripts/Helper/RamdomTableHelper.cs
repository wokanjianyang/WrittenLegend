using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using UnityEngine;
using Random = System.Random;

namespace Game
{
    public class RandomRecord
    {
        public int x { get; set; } = 0;
        public int y { get; set; } = 0;

        public int v { get; set; } = 0;

        public void Next()
        {
            y++;
            if (y >= 100)
            {
                y = 0;
                x++;
                if (x >= 100)
                {
                    x = 0;
                }
            }
        }
    }

    public class RandomTableHelper
    {
        private const string TableText

        private const string url = "back/back4.json";

        private static RandomTableHelper instance = null;

        private string[] Table = new string[100];

        public static RandomTableHelper Instance()
        {
            if (instance == null)
            {
                instance = new RandomTableHelper();
            }

            return instance;
        }

        public void Refresh()
        {
            string text = "";
            for (int i = 1; i <= 10000; i++)
            {
                text += RandomHelper.RandomNumber(0, 10);
            }

            try
            {
                string filePath = Path.Combine(Application.persistentDataPath, url);
                File.WriteAllText(filePath, text);
            }
            catch (Exception ex)
            {
                Debug.Log("saved back4 Error." + ex.Message);
            }
        }

        public RandomTableHelper()
        {
            string text = TableText;

            string filePath = Path.Combine(Application.persistentDataPath, url);
            if (File.Exists(filePath))
            {
                StreamReader sr = new StreamReader(filePath);
                text = sr.ReadToEnd();
                sr.Close();
            }

            for (int i = 0; i < 100; i++)
            {
                Table[i] = text.Substring(i * 100, 100);
            }
        }

        public int Random(int lower, int upper, RandomRecord record)
        {
            if (upper <= 0 || lower >= upper)
            {
                return 0;
            }

            int len = CalLen(upper);

            int r = GetNumber(record, len);

            while (r >= upper || r < lower)
            {
                r = GetNumber(record, len);
            }

            return r;
        }

        public int Random(int bound, RandomRecord record)
        {
            return Random(0, bound, record);
        }

        public int GetNumber(RandomRecord record, int len)
        {
            string text = "";

            for (int i = 0; i < len; i++)
            {
                int row = (record.x + i) % 100;
                text += Table[record.y].Substring(row, 1);
            }

            record.Next();

            return int.Parse(text);
        }

        private int CalLen(int num)
        {
            if (num < 0)
                return -1;
            else if (num < 10)
            {
                return 1;
            }
            else if (num < 100)
            {
                return 2;
            }
            else if (num < 1000)
            {
                return 3;
            }
            else if (num < 10000)
            {
                return 4;
            }
            else if (num < 100000)
            {
                return 5;
            }
            else if (num < 1000000)
            {
                return 6;
            }
            else if (num < 10000000)
            {
                return 7;
            }
            else if (num < 100000000)
            {
                return 8;
            }
            else if (num < 1000000000)
            {
                return 9;
            }

            return -1;
        }
    }
}